[user]
  name = Shane Smith
  email = shane.smith.baz@gmail.com

[alias]
  st = status
  shoe = show
  unstage = reset HEAD --
  lol = "!f() { local extra=\"\"; if git rev-parse -q --verify '@{u}' >/dev/null 2>&1; then extra=\"$extra @{u}\"; fi; git log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cd>%Creset %s' --color --graph --date=relative --branches --remotes=origin/[m]aster HEAD $extra $@; }; f"
  lolb = "!f() { local extra=\"\"; if git rev-parse -q --verify '@{u}' >/dev/null 2>&1; then extra=\"$extra @{u}\"; fi; git log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cd>%Creset %s' --color --graph --date=relative HEAD $extra $@; }; f"
  lolf = "!f() { local extra=\"\"; if git rev-parse -q --verify '@{u}' >/dev/null 2>&1; then extra=\"$extra @{u}\"; fi; git log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cd>%Creset %s' --color --graph --date=relative --name-status --branches --remotes=origin/[m]aster HEAD $extra $@; }; f"
  lolbf = "!f() { local extra=\"\"; if git rev-parse -q --verify '@{u}' >/dev/null 2>&1; then extra=\"$extra @{u}\"; fi; git log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cd>%Creset %s' --color --graph --date=relative --name-status HEAD $extra $@; }; f"
  lolnew = log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cr>%Creset %s' --graph ORIG_HEAD..
  lall = log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cr>%Creset %s' --graph --all
  lallf = log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %C(yellow)<%an, %cr>%Creset %s' --graph --all --name-status
  logf = log --name-status
  co = checkout
  pop = stash pop
  k = !gitk --all >/dev/null 2>&1 &
  staged = diff --staged
  top = rev-parse --show-toplevel
  s = svn
  slog = svn log --show-commit
  slogf = svn log --show-commit --verbose
  slol = svn log --show-commit --oneline
  sshow = "!f() { git show $(git svn find-rev r$1); }; f" # git sshow <rev>
  scheckout = "!f() { git checkout $(git svn find-rev r$1); }; f"
  sco = !git scheckout
  gerrit = !gerrit
  git = !git
  vimconflicts = "!vim $(git status --porcelain | awk '/^(UU|AA)/ { print $2 }')"
  vc = !git vimconflicts
  ignore = "!f() { [ ! -e .gitignore ] && touch .gitignore; echo $1 >> .gitignore; }; f"
  this = "!git init && git add ."
  wdiff = diff --color-words
  wshow = show --color-words
  wshoe = !git wshow
  assume-unchanged = update-index --assume-unchanged --
  no-assume-unchanged = update-index --no-assume-unchanged --
  show-assume-unchanged = !git ls-files -v | grep \"^[[:lower:]]\"
  skip-worktree = update-index --skip-worktree --
  no-skip-worktree = update-index --no-skip-worktree --
  show-skip-worktree = !git ls-files -v | grep \"^S\"
  com = commit -m
  acom = commit -am
  amend = commit --amend
  fixup = commit --amend --reuse-message=HEAD
  wip = commit -m 'wip'
  grep-add = "!f() { git ls-files -m -o --exclude-standard | grep \"$1\" | xargs git add --; }; f"
  remove-submodule = "!f() { if [ -d $1 ]; then echo "Removing from .gitmodule..."; git config -f .gitmodules --remove-section submodule.$1; echo "Removing from .git/config..."; git config -f .git/config --remove-section submodule.$1; echo "Removing from cache..."; git rm --cached $1; fi }; f"
  delete-submodule = "!f() { if [ -d $1 ]; then echo "Removing from .gitmodule..."; git config -f .gitmodules --remove-section submodule.$1; echo "Removing from .git/config..."; git config -f .git/config --remove-section submodule.$1; echo "Removing from cache..."; git rm --cached $1; echo "Removing directory..."; rm -rf $1; fi }; f"
  remove-merged-branches = "!git_remove-merged-branches"
  er-done = "!f() { git commit -m \"$1\" && git push; }; f"
  newb = checkout --track -b
	hardhead = reset --hard HEAD
	pick = cherry-pick
  pup = "!f(){ [ $# -eq 1 ] && git checkout $1 && git pull && git co -; }; f"
	stat = show --name-status
  hs = "!f(){ git log -g --oneline -n${1:-100} | awk '/checkout:/ { if (system(\"git show-ref --quiet --verify refs/heads/\"$NF) == 0) print substr($2, 7)\" \"$NF }' | sort -k2 -u | sort -k1 -n | tail +2 | cut -d' ' -f2; }; f"
  base = merge-base HEAD

[color]
  ui = auto

[core]
  editor = vim
  excludesfile = ~/.gitignore

[merge]
  defaultToUpstream = true

[push]
  default = tracking  # deprecated, update to "upstream" when removed

[gerrit "default"]
  host = partners.macadamian.com
  user = ssmith
  port = 29418
[gerrit "rimnet"]
  host = gerrit.rim.net
  user = shansmith
  port = 29418
