[user]
  name = Shane Smith
  email = shane.smith.baz@gmail.com

[alias]
  st = status
  shoe = show
  unstage = reset HEAD --
  lol = log --pretty=oneline --abbrev-commit --graph --decorate --all
  lolb = log --pretty=oneline --abbrev-commit --graph --decorate
  lolf = log --pretty=oneline --abbrev-commit --graph --decorate --all --name-status
  lolbf = log --pretty=oneline --abbrev-commit --graph --decorate --name-status
  lolnew = log --pretty=oneline --abbrev-commit --graph --decorate ORIG_HEAD..
  logf = log --name-status
  co = checkout
  pop = stash pop
  k = !gitk &
  staged = diff --staged
  top = rev-parse --show-toplevel
  s = svn
  slog = svn log --show-commit
  slogf = svn log --show-commit --verbose
  slol = svn log --show-commit --oneline
  sshow = "!f() { git show $(git svn find-rev r$1); }; f" # git sshow <rev>
  scheckout = "!f() { git checkout $(git svn find-rev r$1); }; f"
  sco = !git scheckout
  gerrit = !gerrit
  git = !git
  vimconflicts = "!vim $(git status --porcelain | awk '/^UU/ { print $2 }')"
  vc = !git vimconflicts
  ignore = "!f() { [ ! -e .gitignore ] && touch .gitignore; echo $1 >> .gitignore; }; f"
  this = "!git init && git add ."
  wdiff = diff --color-words
  wshow = show --color-words
  wshoe = !git wshow
  assume-unchanged = update-index --assume-unchanged --
  no-assume-unchanged = update-index --no-assume-unchanged --
  show-assume-unchanged = !git ls-files -v | grep \"^[[:lower:]]\"
  skip-worktree = update-index --skip-worktree --
  no-skip-worktree = update-index --no-skip-worktree --
  show-skip-worktree = !git ls-files -v | grep \"^S\"
  amend = commit --amend
  fixup = commit --amend --reuse-message=HEAD
  grep-add = "!f() { git ls-files -m -o --exclude-standard | grep \"$1\" | xargs git add --; }; f"
  remove-submodule = "!f() { if [ -d $1 ]; then echo "Removing from .gitmodule..."; git config -f .gitmodules --remove-section submodule.$1; echo "Removing from .git/config..."; git config -f .git/config --remove-section submodule.$1; echo "Removing from cache..."; git rm --cached $1; fi }; f"
  delete-submodule = "!f() { if [ -d $1 ]; then echo "Removing from .gitmodule..."; git config -f .gitmodules --remove-section submodule.$1; echo "Removing from .git/config..."; git config -f .git/config --remove-section submodule.$1; echo "Removing from cache..."; git rm --cached $1; echo "Removing directory..."; rm -rf $1; fi }; f"

[color]
  ui = auto

[core]
  editor = vim

[merge]
  defaultToUpstream = true

[push]
  default = tracking  # deprecated, update to "upstream" when removed
