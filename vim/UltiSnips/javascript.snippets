snippet us "use strict" b
"use strict"`!v GetSnippetPref("semicolon")`
endsnippet

snippet fn "arrow function" w
(${1}) => {
	${VISUAL}$0
}
endsnippet

snippet fnn "old school function" w
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet cl "console.log" w
console.log(${1:`!v GetSnippetPref("quote")`${2:value}`!v GetSnippetPref("quote")`})`!v GetSnippetPref("semicolon")`
endsnippet

snippet cle "console.error" w
console.error(${1:`!v GetSnippetPref("quote")`${2:value}`!v GetSnippetPref("quote")`})`!v GetSnippetPref("semicolon")`
endsnippet

snippet clw "console.warn" w
console.warn(${1:`!v GetSnippetPref("quote")`${2:value}`!v GetSnippetPref("quote")`})`!v GetSnippetPref("semicolon")`
endsnippet

snippet rq "require" b
const ${1} = require(`!v GetSnippetPref("quote")`$1`!v GetSnippetPref("quote")`)`!v GetSnippetPref("semicolon")`
endsnippet

snippet ip "import" b
import ${1} from `!v GetSnippetPref("quote")`${2}`!v GetSnippetPref("quote")``!v GetSnippetPref("semicolon")`
endsnippet

snippet iife "IIFE" b
(function() {
	$0
}())`!v GetSnippetPref("semicolon")`
endsnippet

snippet /** "JSDOC" b
/**
 * $0
 */
endsnippet

###
### Angular
###

snippet befi "before each + inject" b
beforeEach(inject(function($1) {
	$0
}))`!v GetSnippetPref("semicolon")`
endsnippet

snippet amod "angular module" i
angular.module('$1')
endsnippet

snippet aconf "angular config" i
.config(function($1) {
	$0
})`!v GetSnippetPref("semicolon")`
endsnippet

snippet acont "angular controller" i
.controller('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}])`!v GetSnippetPref("semicolon")`
endsnippet

snippet adir "angular directive" i
.directive('${1}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	return {
		restrict: '${3:EA}',
		link: function(scope, element, attrs) {
			${0}
		}
	}`!v GetSnippetPref("semicolon")`
}])`!v GetSnippetPref("semicolon")`
endsnippet

snippet afact "angular factory" i
.factory('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}])`!v GetSnippetPref("semicolon")`
endsnippet

snippet aserv "angular service" i
.service('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}])`!v GetSnippetPref("semicolon")`
endsnippet


###
### Unit Test
###

snippet bef "before each" b
beforeEach(() => {
	$0
})`!v GetSnippetPref("semicolon")`
endsnippet

snippet des "Describe (js)" b
describe('${1:description}', () => {
	$0
})`!v GetSnippetPref("semicolon")`
endsnippet

snippet it "it (js)" b
it('${1:description}', () => {
	$0
})`!v GetSnippetPref("semicolon")`
endsnippet

snippet ex "expect (js)" b
expect(${1:target})$0`!v GetSnippetPref("semicolon")`
endsnippet

snippet ee "expect to equal (js)" b
expect(${1:target}).toEqual(${2:value})`!v GetSnippetPref("semicolon")`
endsnippet

snippet ec "expect to have been called" b
expect(${1:target}).toHaveBeenCalled()`!v GetSnippetPref("semicolon")`
endsnippet

snippet ecw "expect to have been called with" b
expect(${1:target}).toHaveBeenCalledWith(${2:arguments})`!v GetSnippetPref("semicolon")`
endsnippet

snippet thb "to.have.been" b
to.have.been
endsnippet


###
### Project
###

snippet int "Interceptor" b
[actionTypes.${1:FOO}]: (dispatch, action, getState) => {
	const state = getState()`!v GetSnippetPref("semicolon")`
	$0
},
endsnippet

snippet red "Reducer" b
[actionTypes.${1:FOO}]: (state, action) => ({
	...state,
	$0
}),
endsnippet

snippet act "Action" b
[actionTypes.${1:FOO}]: ${0:undefined},
endsnippet

snippet dp "dispatch()" b
dispatch( $0 )`!v GetSnippetPref("semicolon")`
endsnippet
