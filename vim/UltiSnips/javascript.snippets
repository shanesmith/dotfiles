snippet strict "use strict" b
"use strict";
endsnippet

snippet fn "function" w
function(${1}) {
	${VISUAL}$0
}
endsnippet

snippet fnn "named function" w
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fnv "Function assigned to var"
var ${1:function_name} = function(${2}) {
	${VISUAL}$0
};
endsnippet

snippet cl "console.log" w
console.log(${1:"${2:value}"});
endsnippet

snippet cle "console.error" w
console.error(${1:"${2:value}"});
endsnippet

snippet rq "require" b
const ${1} = require("$1");
endsnippet

snippet () "arrow function" w
() => $0
endsnippet

snippet iife "IIFE" b
(function() {
	$0
}());
endsnippet

###
### Angular
###

snippet befi "before each + inject" b
beforeEach(inject(function($1) {
	$0
}));
endsnippet

snippet aconf "angular config" i
config(function($1) {
	$0
});
endsnippet

snippet acont "angular controller" i
controller('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}]);
endsnippet

snippet adir "angular directive" i
directive('${1}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	return {
		restrict: '${3:EA}',
		link: function(scope, element, attrs) {
			${0}
		}
	};
}]);
endsnippet

snippet afact "angular factory" i
factory('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}]);
endsnippet

snippet aserv "angular service" i
service('${1:name}', [${2}function(${2/('|")([A-Z_$]+)?\1?((, ?)$)?/$2(?3::$4)/ig}) {
	$0
}]);
endsnippet


###
### Unit Test
###

snippet bef "before each" b
beforeEach(function() {
	$0
});
endsnippet

snippet des "Describe (js)" b
describe('${1:description}', function() {
	$0
});
endsnippet

snippet it "it (js)" b
it('${1:description}', function() {
	$0
});
endsnippet

snippet ex "expect (js)" b
expect(${1:target})$0;
endsnippet

snippet ee "expect to equal (js)" b
expect(${1:target}).toEqual(${2:value});
endsnippet

snippet ec "expect to have been called" b
expect(${1:target}).toHaveBeenCalled();
endsnippet

snippet ecw "expect to have been called with" b
expect(${1:target}).toHaveBeenCalledWith(${2:arguments});
endsnippet

snippet thb "to.have.been" b
to.have.been
endsnippet
